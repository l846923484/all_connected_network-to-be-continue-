module ctrl_1(clk,reset,
              input_data1,input_data2,input_data3,input_data4,
              input_data5,input_data6,input_data7,input_data8,
              input_data9,input_data10,input_data11,input_data12,
              input_data13,input_data14,input_data15,input_data16,
              complete,q,addr_bw);
input clk,reset;
input[15:0] input_data1,input_data2,input_data3,input_data4,
           input_data5,input_data6,input_data7,input_data8,
           input_data9,input_data10,input_data11,input_data12,
           input_data13,input_data14,input_data15,input_data16;
output complete;
output[15:0] q;
output[8:0] addr_bw;


wire wren;
reg complete;
wire [15:0]mulw1,mulw2,mulw3,mulw4,
           mulw5,mulw6,mulw7,mulw8,
           mulw9,mulw10,mulw11,mulw12,
           mulw13,mulw14,mulw15,mulw16,
           biase,truncated_data;
reg [8:0] addr_bw;
wire[15:0] q;

assign wren=!complete;

rom_biase r_rom_biase (.address(addr_bw),.clock(clk),.q(biase));

rom_weight_1 r_rom_weight_1(.address(addr_bw),.clock(clk),.q(mulw1));
rom_weight_2 r_rom_weight_2(.address(addr_bw),.clock(clk),.q(mulw2));
rom_weight_3 r_rom_weight_3(.address(addr_bw),.clock(clk),.q(mulw3));
rom_weight_4 r_rom_weight_4(.address(addr_bw),.clock(clk),.q(mulw4));
rom_weight_5 r_rom_weight_5(.address(addr_bw),.clock(clk),.q(mulw5));
rom_weight_6 r_rom_weight_6(.address(addr_bw),.clock(clk),.q(mulw6));
rom_weight_7 r_rom_weight_7(.address(addr_bw),.clock(clk),.q(mulw7));
rom_weight_8 r_rom_weight_8(.address(addr_bw),.clock(clk),.q(mulw8));
rom_weight_9 r_rom_weight_9(.address(addr_bw),.clock(clk),.q(mulw9));
rom_weight_10 r_rom_weight_10(.address(addr_bw),.clock(clk),.q(mulw10));
rom_weight_11 r_rom_weight_11(.address(addr_bw),.clock(clk),.q(mulw11));
rom_weight_12 r_rom_weight_12(.address(addr_bw),.clock(clk),.q(mulw12));
rom_weight_12 r_rom_weight_13(.address(addr_bw),.clock(clk),.q(mulw13));
rom_weight_12 r_rom_weight_14(.address(addr_bw),.clock(clk),.q(mulw14));
rom_weight_12 r_rom_weight_15(.address(addr_bw),.clock(clk),.q(mulw15));
rom_weight_12 r_rom_weight_16(.address(addr_bw),.clock(clk),.q(mulw16));

ALU_1 r_ALU_1(.mula1(input_data1),.mula2(input_data2),.mula3(input_data3),.mula4(input_data4),
              .mula5(input_data5),.mula6(input_data6),.mula7(input_data7),.mula8(input_data8),
              .mula9(input_data9),.mula10(input_data10),.mula11(input_data11),.mula12(input_data12),
              .mula13(input_data13),.mula14(input_data14),.mula15(input_data15),.mula16(input_data16),
              .mulw1(mulw1),.mulw2(mulw2),.mulw3(mulw3),.mulw4(mulw4),
              .mulw5(mulw5),.mulw6(mulw6),.mulw7(mulw7),.mulw8(mulw8),
              .mulw9(mulw9),.mulw10(mulw10),.mulw11(mulw11),.mulw12(mulw12),
              .mulw13(mulw13),.mulw14(mulw14),.mulw15(mulw15),.mulw16(mulw16),
              .biase(biase),.truncated_data(truncated_data));

ram_1 r_ram_1(.address(addr_bw),.clock(clk),.data(truncated_data),.wren(wren),.q(q));

always@(posedge clk or posedge reset)
  begin
    if(reset)
        begin
          addr_bw<=9'b000000000;
          complete<=0;
        end
    else
      begin
        if (addr_bw==9'b111111111)
          begin
            complete<=1;
            addr_bw<=addr_bw+9'b000000001;
          end
        else
          begin
            addr_bw<=addr_bw+9'b000000001;
          end
      end
   end

endmodule